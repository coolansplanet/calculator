d660cc54444009619bc7191119d3e19b
"use strict";

var _interopRequireDefault = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _Calculator = _interopRequireDefault(require("./Calculator"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _jsxFileName = "/home/hermanschmidt/Desktop/calculator/src/components/Calculator/Calculator.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

describe('Calculator component', () => {
  it('Matches the snapshot', () => {
    const tree = _reactTestRenderer.default.create(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 14
      },
      __self: void 0
    })).toJSON();

    expect(tree).toMatchSnapshot();
  });
  it('The first displayed number should be 0', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 19
      },
      __self: void 0
    }));
    const display = wrapper.find('.display').text();
    expect(display).toEqual('0');
  });
  it('All numbers buttons work', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 26
      },
      __self: void 0
    }));

    for (var i = 0; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
    }

    expect(wrapper.find('.display').text()).toEqual('1234565789');
  });
  it('Button 0 inputs only once', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39
      },
      __self: void 0
    }));

    for (var i = 0; i < 100; i++) {
      wrapper.find('.b0').simulate('click');
    }

    expect(wrapper.find('.display').text()).toEqual('0');
  });
  it('Point inputs only once', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 53
      },
      __self: void 0
    }));
    wrapper.find('.point').simulate('click');

    for (let i = 0; i < 100; i++) {
      if (i == 0 || i == 50) {
        wrapper.find('.b1').simulate('click');
      } else {
        wrapper.find('.point').simulate('click');
      }
    }

    expect(wrapper.find('.display').text()).toEqual('1.1');
  });
  it('Multiplication works properly', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 71
      },
      __self: void 0
    }));
    const display = wrapper.find('.display').text();

    for (let i = 1; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
      wrapper.find('.multiplication').simulate('click');
    }

    expect(wrapper.find('.display').text()).toEqual('362880');
  });
  it('Addition works properly', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 87
      },
      __self: void 0
    }));
    const display = wrapper.find('.display').text();

    for (let i = 1; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
      wrapper.find('.addition').simulate('click');
    }

    setTimeout(() => {
      expect(display).toEqual('45');
    }, 1000);
  });
  it('Substraction works properly', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 103
      },
      __self: void 0
    }));
    const display = wrapper.find('.display').text();
    wrapper.find('.b8').simulate('click');
    wrapper.find('.b7').simulate('click');

    for (let i = 0; i <= 9; i++) {
      wrapper.find('.subtraction').simulate('click');
      wrapper.find('.b' + i).simulate('click');
    }

    wrapper.find('.equals').simulate('click');
    setTimeout(() => {
      expect(display).toEqual('42');
    }, 1000);
  });
  it('Button equals works properly', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 122
      },
      __self: void 0
    }));
    const display = wrapper.find('.display').text();
    wrapper.find('.b8').simulate('click');
    wrapper.find('.b7').simulate('click');

    for (let i = 0; i <= 9; i++) {
      wrapper.find('.subtraction').simulate('click');
      wrapper.find('.b' + i).simulate('click');
    }

    setTimeout(() => {
      expect(display).toEqual('42');
    }, 1000);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
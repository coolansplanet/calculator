abac409bea0df7dbf7966f5bce33ee85
"use strict";

var _interopRequireDefault = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _Calculator = _interopRequireDefault(require("./Calculator"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _jsxFileName = "/home/hermanschmidt/Desktop/calculator/src/components/Calculator/Calculator.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

describe('Calculator component snapshot', () => {
  it('Matches the snapshot', () => {
    const tree = _reactTestRenderer.default.create(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 15
      },
      __self: void 0
    })).toJSON();

    expect(tree).toMatchSnapshot();
  });
});
describe('Calculator component buttons and display', () => {
  let wrapper;

  const displayOutput = () => {
    return wrapper.find('.display').text();
  };

  beforeEach(() => {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 30
      },
      __self: void 0
    }));
  });
  it('The first displayed number should be 0', () => {
    expect(displayOutput()).toEqual('0');
  });
  it('All numbers buttons work', () => {
    for (var i = 0; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
    }

    wrapper.find('.b0').simulate('click');
    expect(displayOutput()).toEqual('1234567890');
  });
  it('Button 0 inputs only once', () => {
    for (var i = 0; i < 100; i++) {
      wrapper.find('.b0').simulate('click');
    }

    expect(displayOutput()).toEqual('0');
  });
  it('Point inputs only once', () => {
    for (let i = 0; i < 100; i++) {
      if (i == 0 || i == 50) {
        wrapper.find('.b1').simulate('click');
      } else {
        wrapper.find('.point').simulate('click');
      }
    }

    expect(displayOutput()).toEqual('1.1');
  });
  it('Point clicked at first time is added after zero', () => {
    for (let i = 0; i < 100; i++) {
      wrapper.find('.point').simulate('click');
    }

    wrapper.find('.b0').simulate('click');
    expect(displayOutput()).toEqual('0.0');
  });
  it('Multiplication works properly', () => {
    for (let i = 1; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
      wrapper.find('.multiplication').simulate('click');
    }

    expect(displayOutput()).toEqual('362880');
  });
  it('Addition works properly', () => {
    for (let i = 1; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
      wrapper.find('.addition').simulate('click');
    }

    expect(displayOutput()).toEqual('45');
  });
  it('Substraction and equals work properly', () => {
    wrapper.find('.b8').simulate('click');
    wrapper.find('.b7').simulate('click');

    for (let i = 0; i <= 9; i++) {
      wrapper.find('.subtraction').simulate('click');
      wrapper.find('.b' + i).simulate('click');
    }

    wrapper.find('.equals').simulate('click');
    expect(displayOutput()).toEqual('42');
  });
  it('C (clear all) button works properly', () => {
    for (let i = 0; i <= 9; i++) {
      wrapper.find('.addition').simulate('click');
      wrapper.find('.b' + i).simulate('click');
    }

    wrapper.find('.equals').simulate('click');
    wrapper.find('.clear-all').simulate('click');
    expect(displayOutput()).toEqual('0');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
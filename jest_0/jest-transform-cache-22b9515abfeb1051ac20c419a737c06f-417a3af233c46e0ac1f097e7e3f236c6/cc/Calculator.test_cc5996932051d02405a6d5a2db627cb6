d3c3312e47dff7273a454c1d80be1cec
"use strict";

var _interopRequireDefault = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _Calculator = _interopRequireDefault(require("./Calculator"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _jsxFileName = "/home/hermanschmidt/Desktop/calculator/src/components/Calculator/Calculator.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

describe('Calculator component snapshot', () => {
  it('Matches the snapshot', () => {
    const tree = _reactTestRenderer.default.create(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 15
      },
      __self: void 0
    })).toJSON();

    expect(tree).toMatchSnapshot();
  });
});
describe('Calculator component buttons and display', () => {
  let wrapper;

  const displayOutput = () => {
    return wrapper.find('.display').text();
  };

  const click = node => {
    wrapper.find(node).simulate('click');
  };

  beforeEach(() => {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 33
      },
      __self: void 0
    }));
  });
  it('The first displayed number should be 0', () => {
    expect(displayOutput()).toEqual('0');
  });
  it('All numbers buttons work', () => {
    for (let i = 0; i <= 9; i++) {
      click('.b' + i);
    }

    click('.b0');
    expect(displayOutput()).toEqual('1234567890');
  });
  it('Button 0 inputs only once', () => {
    for (let i = 0; i < 100; i++) {
      click('.b0');
    }

    expect(displayOutput()).toEqual('0');
  });
  it('Button 0 inputs only once (different test)', () => {
    click('.b0');
    click('.point');
    click('.equals');

    for (let i = 0; i < 9; i++) {
      click('.b0');
    }

    expect(displayOutput()).toEqual('0');
  });
  it('Point inputs only once', () => {
    for (let i = 0; i < 100; i++) {
      if (i == 0 || i == 50) {
        click('.b1');
      } else {
        click('.point');
      }
    }

    expect(displayOutput()).toEqual('1.1');
  });
  it('Point clicked at first time is added after zero', () => {
    for (let i = 0; i < 100; i++) {
      click('.point');
    }

    click('.b0');
    expect(displayOutput()).toEqual('0.0');
  });
  it('Multiplication works properly', () => {
    for (let i = 1; i <= 9; i++) {
      click('.b' + i);
      click('.multiplication');
    }

    expect(displayOutput()).toEqual('362880');
  });
  it('Addition works properly', () => {
    for (let i = 1; i <= 9; i++) {
      click('.b' + i);
      click('.addition');
    }

    expect(displayOutput()).toEqual('45');
  });
  it('Division works properly', () => {
    click('.b1');
    click('.b9');
    click('.b6');
    click('.b1');
    click('.b8');
    click('.b8');
    click('.b8');
    click('.division');
    click('.b3');
    expect(displayOutput()).toEqual('653961');
  });
  it('Substraction and equals work properly', () => {
    click('.b8');
    click('.b7');

    for (let i = 0; i <= 9; i++) {
      click('.subtraction');
      click('.b' + i);
    }

    click('.equals');
    expect(displayOutput()).toEqual('42');
  });
  it('C (clear all) button works properly', () => {
    for (let i = 0; i <= 9; i++) {
      click('.addition');
      click('.b' + i);
    }

    click('.equals');
    click('.clear-all');
    expect(displayOutput()).toEqual('0');
  });
  it('Del (delete one character) button works properly', () => {
    for (let i = 0; i <= 9; i++) {
      click('.b' + i);
    }

    click('.point');
    click('.b0');
    click('.delete');
    click('.delete');
    click('.delete');
    expect(displayOutput()).toEqual('12345678');
  });
  it('Display don\'t display numbers containing more than 11 digits', () => {
    for (let i = 0; i <= 90; i++) {
      i === 5 ? click('.point') : click('.b8');
    }

    let pointIndex = displayOutput().indexOf('.');
    expect(displayOutput().slice(pointIndex, pointIndex + 1).toString().length).toBeLessThanOrEqual(11);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhbGN1bGF0b3IudGVzdC5qcyJdLCJuYW1lcyI6WyJFbnp5bWUiLCJjb25maWd1cmUiLCJhZGFwdGVyIiwiQWRhcHRlciIsImRlc2NyaWJlIiwiaXQiLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJ3cmFwcGVyIiwiZGlzcGxheU91dHB1dCIsImZpbmQiLCJ0ZXh0IiwiY2xpY2siLCJub2RlIiwic2ltdWxhdGUiLCJiZWZvcmVFYWNoIiwidG9FcXVhbCIsImkiLCJwb2ludEluZGV4IiwiaW5kZXhPZiIsInNsaWNlIiwidG9TdHJpbmciLCJsZW5ndGgiLCJ0b0JlTGVzc1RoYW5PckVxdWFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQUVBQSxnQkFBT0MsU0FBUCxDQUFpQjtBQUFFQyxFQUFBQSxPQUFPLEVBQUUsSUFBSUMsMkJBQUo7QUFBWCxDQUFqQjs7QUFHQUMsUUFBUSxDQUFDLCtCQUFELEVBQWtDLE1BQU07QUFFNUNDLEVBQUFBLEVBQUUsQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBQzdCLFVBQU1DLElBQUksR0FBR0MsMkJBQVNDLE1BQVQsQ0FBZ0IsNkJBQUMsbUJBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFBaEIsRUFBK0JDLE1BQS9CLEVBQWI7O0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0osSUFBRCxDQUFOLENBQWFLLGVBQWI7QUFDSCxHQUhDLENBQUY7QUFJSCxDQU5PLENBQVI7QUFTQVAsUUFBUSxDQUFDLDBDQUFELEVBQTZDLE1BQU07QUFHdkQsTUFBSVEsT0FBSjs7QUFDQSxRQUFNQyxhQUFhLEdBQUcsTUFBTTtBQUN4QixXQUFPRCxPQUFPLENBQUNFLElBQVIsQ0FBYSxVQUFiLEVBQXlCQyxJQUF6QixFQUFQO0FBQ0gsR0FGRDs7QUFHQSxRQUFNQyxLQUFLLEdBQUdDLElBQUksSUFBSTtB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QUFLLENBQUMsS0FBRCxDQUFMO0FBRUFBLElBQUFBLEtBQUssQ0FBQyxTQUFELENBQUw7QUFDQUEsSUFBQUEsS0FBSyxDQUFDLFNBQUQsQ0FBTDtBQUNBQSxJQUFBQSxLQUFLLENBQUMsU0FBRCxDQUFMO0FBRUFOLElBQUFBLE1BQU0sQ0FDRkcsYUFBYSxFQURYLENBQU4sQ0FFRU8sT0FGRixDQUVVLFVBRlY7QUFHSCxHQWZDLENBQUY7QUFpQkFmLEVBQUFBLEVBQUUsQ0FBQywrREFBRCxFQUFrRSxNQUFNO0FBRXRFLFNBQUssSUFBSWdCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLElBQUksRUFBckIsRUFBeUJBLENBQUMsRUFBMUIsRUFBOEI7QUFDMUJBLE1BQUFBLENBQUMsS0FBSyxDQUFOLEdBQVVMLEtBQUssQ0FBQyxRQUFELENBQWYsR0FBNEJBLEtBQUssQ0FBQyxLQUFELENBQWpDO0FBQ0g7O0FBRUQsUUFBSU0sVUFBVSxHQUFHVCxhQUFhLEdBQUdVLE9BQWhCLENBQXdCLEdBQXhCLENBQWpCO0FBQ0FiLElBQUFBLE1BQU0sQ0FDRkcsYUFBYSxHQUFHVyxLQUFoQixDQUFzQkYsVUFBdEIsRUFBa0NBLFVBQVUsR0FBQyxDQUE3QyxFQUFnREcsUUFBaEQsR0FBMkRDLE1BRHpELENBQU4sQ0FFRUMsbUJBRkYsQ0FFc0IsRUFGdEI7QUFHSCxHQVZDLENBQUY7QUFXSCxDQXJNTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhbGN1bGF0b3IgZnJvbSAnLi9DYWxjdWxhdG9yJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBFbnp5bWUgZnJvbSAnZW56eW1lJztcbmltcG9ydCBBZGFwdGVyIGZyb20gJ2VuenltZS1hZGFwdGVyLXJlYWN0LTE2JztcbmltcG9ydCB7IHNoYWxsb3cgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5Fbnp5bWUuY29uZmlndXJlKHsgYWRhcHRlcjogbmV3IEFkYXB0ZXIoKSB9KTtcblxuXG5kZXNjcmliZSgnQ2FsY3VsYXRvciBjb21wb25lbnQgc25hcHNob3QnLCAoKSA9PiB7XG5cbiAgICBpdCgnTWF0Y2hlcyB0aGUgc25hcHNob3QnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoPENhbGN1bGF0b3IvPikudG9KU09OKCk7XG4gICAgICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcbn0pO1xuXG5cbmRlc2NyaWJlKCdDYWxjdWxhdG9yIGNvbXBvbmVudCBidXR0b25zIGFuZCBkaXNwbGF5JywgKCkgPT4ge1xuXG5cbiAgICBsZXQgd3JhcHBlcjtcbiAgICBjb25zdCBkaXNwbGF5T3V0cHV0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5maW5kKCcuZGlzcGxheScpLnRleHQoKTtcbiAgICB9XG4gICAgY29uc3QgY2xpY2sgPSBub2RlID0+IHtcbiAgICAgICAgd3JhcHBlci5maW5kKG5vZGUpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgIH1cblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICB3cmFwcGVyID0gc2hhbGxvdyg8Q2FsY3VsYXRvci8+KTtcbiAgICB9KVxuXG5cbiAgICBpdCgnVGhlIGZpcnN0IGRpc3BsYXllZCBudW1iZXIgc2hvdWxkIGJlIDAnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIGRpc3BsYXlPdXRwdXQoKVxuICAgICAgICApLnRvRXF1YWwoJzAnKTtcbiAgICB9KTtcblxuICAgIGl0KCdBbGwgbnVtYmVycyBidXR0b25zIHdvcmsnLCAoKSA9PiB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XG4gICAgICAgICAgICBjbGljaygnLmInK2kpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcuYjAnKTtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMTIzNDU2Nzg5MCcpO1xuXG4gICAgfSk7XG5cbiAgICBpdCgnQnV0dG9uIDAgaW5wdXRzIG9ubHkgb25jZScsICgpID0+IHtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XG4gICAgICAgICAgICBjbGljaygnLmIwJyk7XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KClcbiAgICAgICAgKS50b0VxdWFsKCcwJyk7XG5cbiAgICB9KTtcblxuXG4gICAgaXQoJ0J1dHRvbiAwIGlucHV0cyBvbmx5IG9uY2UgKGRpZmZlcmVudCB0ZXN0KScsICgpID0+IHtcblxuICAgICAgICBjbGljaygnLmIwJyk7XG4gICAgICAgIGNsaWNrKCcucG9pbnQnKTtcbiAgICAgICAgY2xpY2soJy5lcXVhbHMnKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDk7IGkrKykge1xuICAgICAgICAgICAgY2xpY2soJy5iMCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMCcpO1xuXG4gICAgfSk7XG5cblxuICAgIGl0KCdQb2ludCBpbnB1dHMgb25seSBvbmNlJywgKCkgPT4ge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09IDAgfHwgaSA9PSA1MCkge1xuICAgICAgICAgICAgICAgIGNsaWNrKCcuYjEnKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGNsaWNrKCcucG9pbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIGRpc3BsYXlPdXRwdXQoKVxuICAgICAgICApLnRvRXF1YWwoJzEuMScpO1xuXG4gICAgfSk7XG5cbiAgICBpdCgnUG9pbnQgY2xpY2tlZCBhdCBmaXJzdCB0aW1lIGlzIGFkZGVkIGFmdGVyIHplcm8nLCAoKSA9PiB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgICAgICAgICAgY2xpY2soJy5wb2ludCcpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcuYjAnKTtcblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KClcbiAgICAgICAgKS50b0VxdWFsKCcwLjAnKTtcblxuICAgIH0pO1xuXG4gICAgaXQoJ011bHRpcGxpY2F0aW9uIHdvcmtzIHByb3Blcmx5JywgKCkgPT4ge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDk7IGkrKykge1xuXG4gICAgICAgICAgICBjbGljaygnLmInK2kpO1xuICAgICAgICAgICAgY2xpY2soJy5tdWx0aXBsaWNhdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMzYyODgwJyk7XG5cbiAgICB9KTtcblxuICAgIGl0KCdBZGRpdGlvbiB3b3JrcyBwcm9wZXJseScsICgpID0+IHtcblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA5OyBpKyspIHtcbiAgICAgICAgICAgIGNsaWNrKCcuYicraSk7XG4gICAgICAgICAgICBjbGljaygnLmFkZGl0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KClcbiAgICAgICAgKS50b0VxdWFsKCc0NScpO1xuICAgIH0pO1xuXG5cblxuICAgIGl0KCdEaXZpc2lvbiB3b3JrcyBwcm9wZXJseScsICgpID0+IHtcblxuICAgICAgICBjbGljaygnLmIxJyk7XG4gICAgICAgIGNsaWNrKCcuYjknKTtcbiAgICAgICAgY2xpY2soJy5iNicpO1xuICAgICAgICBjbGljaygnLmIxJyk7XG4gICAgICAgIGNsaWNrKCcuYjgnKTtcbiAgICAgICAgY2xpY2soJy5iOCcpO1xuICAgICAgICBjbGljaygnLmI4Jyk7XG4gICAgICAgIGNsaWNrKCcuZGl2aXNpb24nKTtcbiAgICAgICAgY2xpY2soJy5iMycpO1xuXG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIGRpc3BsYXlPdXRwdXQoKVxuICAgICAgICApLnRvRXF1YWwoJzY1Mzk2MScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1N1YnN0cmFjdGlvbiBhbmQgZXF1YWxzIHdvcmsgcHJvcGVybHknLCAoKSA9PiB7XG5cbiAgICAgICAgY2xpY2soJy5iOCcpO1xuICAgICAgICBjbGljaygnLmI3Jyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XG5cbiAgICAgICAgICAgIGNsaWNrKCcuc3VidHJhY3Rpb24nKTtcbiAgICAgICAgICAgIGNsaWNrKCcuYicraSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpY2soJy5lcXVhbHMnKTtcblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KClcbiAgICAgICAgKS50b0VxdWFsKCc0MicpXG4gICAgfSk7XG5cbiAgICBpdCgnQyAoY2xlYXIgYWxsKSBidXR0b24gd29ya3MgcHJvcGVybHknLCAoKSA9PiB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XG4gICAgICAgICAgICBjbGljaygnLmFkZGl0aW9uJyk7XG4gICAgICAgICAgICBjbGljaygnLmInK2kpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcuZXF1YWxzJyk7XG4gICAgICAgIGNsaWNrKCcuY2xlYXItYWxsJyk7XG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMCcpXG4gICAgfSk7XG5cbiAgICBpdCgnRGVsIChkZWxldGUgb25lIGNoYXJhY3RlcikgYnV0dG9uIHdvcmtzIHByb3Blcmx5JywgKCkgPT4ge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IDk7IGkrKykge1xuICAgICAgICAgICAgY2xpY2soJy5iJytpKTtcbiAgICAgICAgfVxuICAgICAgICBjbGljaygnLnBvaW50Jyk7XG4gICAgICAgIGNsaWNrKCcuYjAnKTtcblxuICAgICAgICBjbGljaygnLmRlbGV0ZScpO1xuICAgICAgICBjbGljaygnLmRlbGV0ZScpO1xuICAgICAgICBjbGljaygnLmRlbGV0ZScpO1xuXG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIGRpc3BsYXlPdXRwdXQoKVxuICAgICAgICApLnRvRXF1YWwoJzEyMzQ1Njc4JylcbiAgICB9KTtcblxuICAgIGl0KCdEaXNwbGF5IGRvblxcJ3QgZGlzcGxheSBudW1iZXJzIGNvbnRhaW5pbmcgbW9yZSB0aGFuIDExIGRpZ2l0cycsICgpID0+IHtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSA5MDsgaSsrKSB7XG4gICAgICAgICAgICBpID09PSA1ID8gY2xpY2soJy5wb2ludCcpIDogY2xpY2soJy5iOCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBvaW50SW5kZXggPSBkaXNwbGF5T3V0cHV0KCkuaW5kZXhPZignLicpO1xuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KCkuc2xpY2UocG9pbnRJbmRleCwgcG9pbnRJbmRleCsxKS50b1N0cmluZygpLmxlbmd0aFxuICAgICAgICApLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTEpO1xuICAgIH0pO1xufSk7XG4iXX0=
9858810f2d001941f9bb5ae9e8cf80b3
"use strict";

var _interopRequireWildcard = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _mathjs = _interopRequireDefault(require("mathjs"));

var _jsxFileName = "/home/hermanschmidt/Desktop/calculator/src/components/Calculator/Calculator.js";

class Calculator extends _react.Component {
  constructor() {
    super();
    this.state = {
      display: '0',
      total: '0',
      operator: null,
      displayingTotal: true
    };
  }

  inputNumber(value) {
    /*
        If the previous number shown in the display screen
        was a result (a total), the new input number replaces it.
        Otherwise, the new input number is added
        as a new digit to it.
    */
    let stringeredNumber = value.toString();
    let display = this.state.displayingTotal || this.state.display === '0' ? stringeredNumber : this.state.display + stringeredNumber;
    /*
        If the previous shown number, the new input number
        and the stored result equals to 0, then the component
        assumes it's showing a result;
    */

    let displayingTotal = this.state.total === '0' && this.state.display === '0' && stringeredNumber === '0';
    let pointIndex = display.indexOf('.');
    let fitsOnDisplay = display.splice(pointIndex, pointIndex + 1).length <= 11;
    this.setState({
      display: fitsOnDisplay(display) ? display : this.state.display,
      displayingTotal: displayingTotal
    });
  }

  inputPoint() {
    let display = this.state.display;

    if (display.indexOf('.') < 0) {
      display += '.';
    }

    this.setState({
      display: this.state.displayingTotal ? '0.' : display,
      displayingTotal: false
    });
  }

  inputOperator(operator) {
    let display;
    let previousResult = this.state.operator ? _mathjs.default.eval(this.state.total + this.state.operator + this.state.display) : this.state.total;
    let total = this.state.operator && !this.state.displayingTotal ? previousResult.toString() : this.state.display;

    if (isNaN(previousResult)) {
      display = 'Error';
    } else {
      display = total.substr(0, 11);
    }

    this.setState({
      display: display,
      total: total,
      operator: operator === '=' ? null : operator,
      displayingTotal: true
    });
  }

  clear(value) {
    if (value === 'all') {
      this.setState({
        display: '0',
        total: '0',
        operator: null,
        displayingTotal: true
      });
    } else if (value === 'entry') {
      this.setState({
        display: '0'
      });
    } else if (value === 'character' && this.state.display !== '0') {
      let display = this.state.display.substr(0, this.state.display.length - 1);
      this.setState({
        display: this.state.display.length > 1 && !isNaN(display) ? display : '0'
      });
    }
  }

  showAbout() {
    alert('\nCalculator:\nMade with â™¥ by Herman Schmidt\n');
  }

  render() {
    const inputNumber = this.inputNumber,
          inputPoint = this.inputPoint,
          inputOperator = this.inputOperator,
          clear = this.clear;
    return _react.default.createElement("div", {
      className: "calculator",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 130
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "display",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 131
      },
      __self: this
    }, this.state.display), _react.default.createElement("div", {
      className: "buttons",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 135
      },
      __self: this
    }, _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 7),
      className: "b7",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 136
      },
      __self: this
    }, "7"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 8),
      className: "b8",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 142
      },
      __self: this
    }, "8"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 9),
      className: "b9",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 148
      },
      __self: this
    }, "9"), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '/'),
      className: "division",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 154
      },
      __self: this
    }, "\xF7"), _react.default.createElement("button", {
      className: "special-button clear-all",
      onClick: clear.bind(this, 'all'),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 160
      },
      __self: this
    }, "C"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 4),
      className: "b4",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 166
      },
      __self: this
    }, "4"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 5),
      className: "b5",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 172
      },
      __self: this
    }, "5"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 6),
      className: "b6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 178
      },
      __self: this
    }, "6"), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '*'),
      className: "multiplication",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 184
      },
      __self: this
    }, "\xD7"), _react.default.createElement("button", {
      className: "special-button clear-entry",
      onClick: clear.bind(this, 'entry'),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 190
      },
      __self: this
    }, "CE"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 1),
      className: "b1",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 196
      },
      __self: this
    }, "1"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 2),
      className: "b2",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 202
      },
      __self: this
    }, "2"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 3),
      className: "b3",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 208
      },
      __self: this
    }, "3"), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '-'),
      className: "substraction",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 214
      },
      __self: this
    }, "-"), _react.default.createElement("button", {
      className: "special-button delete",
      onClick: clear.bind(this, 'character'),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 220
      },
      __self: this
    }, "DEL"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 0),
      className: "b0",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 226
      },
      __self: this
    }, "0"), _react.default.createElement("button", {
      onClick: inputPoint.bind(this),
      className: "point",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 232
      },
      __self: this
    }, "."), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '='),
      className: "equals",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 238
      },
      __self: this
    }, "="), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '+'),
      className: "addition",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 244
      },
      __self: this
    }, "+"), _react.default.createElement("button", {
      className: "special-button about",
      onClick: this.showAbout,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 250
      },
      __self: this
    }, "A")));
  }

}

var _default = Calculator;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
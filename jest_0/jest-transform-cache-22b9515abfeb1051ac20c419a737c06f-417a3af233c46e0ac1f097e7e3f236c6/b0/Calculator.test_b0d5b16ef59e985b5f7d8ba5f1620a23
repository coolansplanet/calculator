149909b0ed4be70773b92387bf51765f
"use strict";

var _interopRequireDefault = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _Calculator = _interopRequireDefault(require("./Calculator"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _jsxFileName = "/home/hermanschmidt/Desktop/calculator/src/components/Calculator/Calculator.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

describe('Calculator component snapshot', () => {
  it('Matches the snapshot', () => {
    const tree = _reactTestRenderer.default.create(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 15
      },
      __self: void 0
    })).toJSON();

    expect(tree).toMatchSnapshot();
  });
});
describe('Calculator component click events', () => {
  let wrapper;

  const displayOutput = () => {
    return wrapper.find('.display').text();
  };

  const click = node => {
    wrapper.find(node).simulate('click');
  };

  beforeEach(() => {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 33
      },
      __self: void 0
    }));
  });
  it('The first displayed number should be 0', () => {
    expect(displayOutput()).toEqual('0');
  });
  it('All numbers buttons work', () => {
    for (let i = 0; i <= 9; i++) {
      click('.b' + i);
    }

    click('.b0');
    expect(displayOutput()).toEqual('1234567890');
  });
  it('Button 0 inputs only once', () => {
    for (let i = 0; i < 100; i++) {
      click('.b0');
    }

    expect(displayOutput()).toEqual('0');
  });
  it('Button 0 inputs only once (different test)', () => {
    click('.b0');
    click('.point');
    click('.equals');

    for (let i = 0; i < 9; i++) {
      click('.b0');
    }

    expect(displayOutput()).toEqual('0');
  });
  it('Point inputs only once', () => {
    for (let i = 0; i < 100; i++) {
      if (i == 0 || i == 50) {
        click('.b1');
      } else {
        click('.point');
      }
    }

    expect(displayOutput()).toEqual('1.1');
  });
  it('Point clicked at first time is added after zero', () => {
    for (let i = 0; i < 100; i++) {
      click('.point');
    }

    click('.b0');
    expect(displayOutput()).toEqual('0.0');
  });
  it('Multiplication works properly', () => {
    for (let i = 1; i <= 9; i++) {
      click('.b' + i);
      click('.multiplication');
    }

    expect(displayOutput()).toEqual('362880');
  });
  it('Multiplication works properly', () => {
    for (let i = 1; i <= 9; i++) {
      click('.b9');
      click('.multiplication');
    }

    expect(displayOutput()).toEqual('387420489');
  });
  it('Addition works properly', () => {
    for (let i = 1; i <= 9; i++) {
      click('.b' + i);
      click('.addition');
    }

    expect(displayOutput()).toEqual('45');
  });
  it('Addition works properly (different addition)', () => {
    for (let i = 1; i <= 9; i++) {
      click('.b1');
      click('.addition');
      click('.b4');
      click('.addition');
      click('.b9');
      click('.addition');
    }

    expect(displayOutput()).toEqual('126');
  });
  it('Division works properly', () => {
    click('.b7');
    click('.b2');
    click('.b9');
    click('.b8');
    click('.b5');
    click('.b1');
    click('.b4');
    click('.division');
    click('.b3');
    click('.equals');
    expect(displayOutput()).toEqual('2432838');
  });
  it('Substraction and equals work properly', () => {
    click('.b8');
    click('.b7');

    for (let i = 0; i <= 9; i++) {
      click('.subtraction');
      click('.b' + i);
    }

    click('.equals');
    expect(displayOutput()).toEqual('42');
  });
  it('C (clear all) button works properly', () => {
    for (let i = 0; i <= 9; i++) {
      click('.addition');
      click('.b' + i);
    }

    click('.equals');
    click('.clear-all');
    expect(displayOutput()).toEqual('0');
  });
  it('Del (delete one character) button works properly', () => {
    for (let i = 0; i <= 9; i++) {
      click('.b' + i);
    }

    click('.point');
    click('.b0');
    click('.delete');
    click('.delete');
    click('.delete');
    expect(displayOutput()).toEqual('12345678');
  });
  it('Display don\'t display numbers containing more than 11 digits', () => {
    for (let i = 0; i <= 90; i++) {
      i === 5 ? click('.point') : click('.b8');
    }

    let output = displayOutput();
    let pointIndex = output.indexOf('.');
    output.slice(pointIndex, pointIndex + 1);
    expect(output.length).toBeLessThanOrEqual(11);
  });
  it('Display don\'t display numbers containing more than 11 digits when doing operation', () => {
    for (let i = 1; i < 100; i++) {
      click('.b9');
      click('.multiplication');
    }

    click('.equals');
    let output = displayOutput();
    let pointIndex = output.indexOf('.');
    output.slice(pointIndex, pointIndex + 1);
    expect(output.length).toBeLessThanOrEqual(11);
  });
  it('NaN displays as \'Error\'', () => {
    click('.b0');
    click('.division');
    click('.b0');
    click('.equals');
    expect(displayOutput()).toEqual('Error');
  }); //TODO: 2 + 00000 should input only one 0 
  //TODO: del at beginning shouldn't delete
  //TODO: del at beninning, twice clicks on '0 ' shouldn't show more than one zero
  //TODO: 98 -> CE -> 123 should output 123 instead of 0123
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
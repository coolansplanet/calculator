{"version":3,"sources":["Calculator.test.js"],"names":["Enzyme","configure","adapter","Adapter","describe","it","tree","renderer","create","toJSON","expect","toMatchSnapshot","wrapper","displayOutput","find","text","click","node","simulate","beforeEach","toEqual","i","output","pointIndex","indexOf","slice","length","toBeLessThanOrEqual"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAEAA,gBAAOC,SAAP,CAAiB;AAAEC,EAAAA,OAAO,EAAE,IAAIC,2BAAJ;AAAX,CAAjB;;AAGAC,QAAQ,CAAC,+BAAD,EAAkC,MAAM;AAE5CC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC7B,UAAMC,IAAI,GAAGC,2BAASC,MAAT,CAAgB,6BAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhB,EAA+BC,MAA/B,EAAb;;AACAC,IAAAA,MAAM,CAACJ,IAAD,CAAN,CAAaK,eAAb;AACH,GAHC,CAAF;AAIH,CANO,CAAR;AASAP,QAAQ,CAAC,mCAAD,EAAsC,MAAM;AAGhD,MAAIQ,OAAJ;;AACA,QAAMC,aAAa,GAAG,MAAM;AACxB,WAAOD,OAAO,CAACE,IAAR,CAAa,UAAb,EAAyBC,IAAzB,EAAP;AACH,GAFD;;AAGA,QAAMC,KAAK,GAAGC,IAAI,IAAI;AAClBL,IAAAA,OAAO,CAACE,IAAR,CAAaG,IAAb,EAAmBC,QAAnB,CAA4B,OAA5B;AACH,GAFD;;AAIAC,EAAAA,UAAU,CAAC,MAAM;AACbP,IAAAA,OAAO,GAAG,qBAAQ,6BAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR,CAAV;AACH,GAFS,CAAV;AAKAP,EAAAA,EAAE,CAAC,wCAAD,EAA2C,MAAM;AAC/CK,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAGH,GAJC,CAAF;AAMAf,EAAAA,EAAE,CAAC,0BAAD,EAA6B,MAAM;AAEjC,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,OAAKK,CAAN,CAAL;AACH;;AACDL,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,YAFV;AAIH,GAVC,CAAF;AAYAf,EAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AAElC,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BL,MAAAA,KAAK,CAAC,KAAD,CAAL;AACH;;AAEDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAIH,GAVC,CAAF;AAaAf,EAAAA,EAAE,CAAC,4CAAD,EAA+C,MAAM;AAEnDW,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,QAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,SAAD,CAAL;;AAEA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBL,MAAAA,KAAK,CAAC,KAAD,CAAL;AACH;;AAEDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAIH,GAdC,CAAF;AAiBAf,EAAAA,EAAE,CAAC,4CAAD,EAA+C,MAAM;AAEnDW,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,WAAD,CAAL;;AAEA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBL,MAAAA,KAAK,CAAC,KAAD,CAAL;AACH;;AAEDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAIH,GAbC,CAAF;AAeAf,EAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AAE/B,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,UAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,EAAnB,EAAuB;AACnBL,QAAAA,KAAK,CAAC,KAAD,CAAL;AACH,OAFD,MAEK;AACDA,QAAAA,KAAK,CAAC,QAAD,CAAL;AACH;AACJ;;AAEDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,KAFV;AAIH,GAdC,CAAF;AAgBAf,EAAAA,EAAE,CAAC,iDAAD,EAAoD,MAAM;AAExD,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BL,MAAAA,KAAK,CAAC,QAAD,CAAL;AACH;;AACDA,IAAAA,KAAK,CAAC,KAAD,CAAL;AAEAN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,KAFV;AAIH,GAXC,CAAF;AAaAf,EAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AAEtC,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAEzBL,MAAAA,KAAK,CAAC,OAAKK,CAAN,CAAL;AACAL,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACH;;AAEDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,QAFV;AAIH,GAZC,CAAF;AAeAf,EAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AAEtC,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACH;;AAEDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,WAFV;AAIH,GAXC,CAAF;AAcAf,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAEhC,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,OAAKK,CAAN,CAAL;AACAL,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AAEDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,IAFV;AAGH,GAVC,CAAF;AAaAf,EAAAA,EAAE,CAAC,8CAAD,EAAiD,MAAM;AAErD,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,WAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,WAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AAEDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,KAFV;AAGH,GAdC,CAAF;AAiBAf,EAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAEhCW,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,WAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AAEAA,IAAAA,KAAK,CAAC,SAAD,CAAL;AAEAN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,SAFV;AAGH,GAjBC,CAAF;AAmBAf,EAAAA,EAAE,CAAC,uCAAD,EAA0C,MAAM;AAE9CW,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;;AAEA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAEzBL,MAAAA,KAAK,CAAC,cAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,OAAKK,CAAN,CAAL;AACH;;AACDL,IAAAA,KAAK,CAAC,SAAD,CAAL;AAEAN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,IAFV;AAGH,GAfC,CAAF;AAiBAf,EAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAE5C,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,WAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,OAAKK,CAAN,CAAL;AACH;;AACDL,IAAAA,KAAK,CAAC,SAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,YAAD,CAAL;AAEAN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAGH,GAZC,CAAF;AAcAf,EAAAA,EAAE,CAAC,kDAAD,EAAqD,MAAM;AAEzD,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,OAAKK,CAAN,CAAL;AACH;;AACDL,IAAAA,KAAK,CAAC,QAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AAEAA,IAAAA,KAAK,CAAC,SAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,SAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,SAAD,CAAL;AAEAN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,UAFV;AAGH,GAfC,CAAF;AAiBAf,EAAAA,EAAE,CAAC,+DAAD,EAAkE,MAAM;AAEtE,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BA,MAAAA,CAAC,KAAK,CAAN,GAAUL,KAAK,CAAC,QAAD,CAAf,GAA4BA,KAAK,CAAC,KAAD,CAAjC;AACH;;AAED,QAAIM,MAAM,GAAGT,aAAa,EAA1B;AACA,QAAIU,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAe,GAAf,CAAjB;AACAF,IAAAA,MAAM,CAACG,KAAP,CAAaF,UAAb,EAAyBA,UAAU,GAAC,CAApC;AACAb,IAAAA,MAAM,CACFY,MAAM,CAACI,MADL,CAAN,CAEEC,mBAFF,CAEsB,EAFtB;AAGH,GAZC,CAAF;AAeAtB,EAAAA,EAAE,CAAC,oFAAD,EAAuF,MAAM;AAE3F,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BL,MAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACH;;AACDA,IAAAA,KAAK,CAAC,SAAD,CAAL;AACA,QAAIM,MAAM,GAAGT,aAAa,EAA1B;AACA,QAAIU,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAe,GAAf,CAAjB;AACAF,IAAAA,MAAM,CAACG,KAAP,CAAaF,UAAb,EAAyBA,UAAU,GAAC,CAApC;AACAb,IAAAA,MAAM,CACFY,MAAM,CAACI,MADL,CAAN,CAEEC,mBAFF,CAEsB,EAFtB;AAGH,GAbC,CAAF;AAeAtB,EAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AAElCW,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,WAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAA,IAAAA,KAAK,CAAC,SAAD,CAAL;AACAN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,OAFV;AAGH,GATC,CAAF;AAYAf,EAAAA,EAAE,CAAC,oDAAD,EAAuD,MAAM;AAE3DW,IAAAA,KAAK,CAAC,KAAD,CAAL;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AACDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAGH,GATC,CAAF;AAWAf,EAAAA,EAAE,CAAC,0DAAD,EAA6D,MAAM;AAEjEW,IAAAA,KAAK,CAAC,KAAD,CAAL;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACH;;AACDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAGH,GATC,CAAF;AAWAf,EAAAA,EAAE,CAAC,oDAAD,EAAuD,MAAM;AAE3DW,IAAAA,KAAK,CAAC,KAAD,CAAL;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AACDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAGH,GATC,CAAF;AAWAf,EAAAA,EAAE,CAAC,uDAAD,EAA0D,MAAM;AAE9DW,IAAAA,KAAK,CAAC,KAAD,CAAL;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBL,MAAAA,KAAK,CAAC,eAAD,CAAL;AACH;;AACDN,IAAAA,MAAM,CACFG,aAAa,EADX,CAAN,CAEEO,OAFF,CAEU,GAFV;AAGH,GATC,CAAF,CArTgD,CAgUhD;AACA;AACA;AAEH,CApUO,CAAR","sourcesContent":["import Calculator from './Calculator';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport { shallow } from 'enzyme';\nimport renderer from 'react-test-renderer';\n\nEnzyme.configure({ adapter: new Adapter() });\n\n\ndescribe('Calculator component snapshot', () => {\n\n    it('Matches the snapshot', () => {\n        const tree = renderer.create(<Calculator/>).toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n\n\ndescribe('Calculator component click events', () => {\n\n\n    let wrapper;\n    const displayOutput = () => {\n        return wrapper.find('.display').text();\n    }\n    const click = node => {\n        wrapper.find(node).simulate('click');\n    }\n\n    beforeEach(() => {\n        wrapper = shallow(<Calculator/>);\n    })\n\n\n    it('The first displayed number should be 0', () => {\n        expect(\n            displayOutput()\n        ).toEqual('0');\n    });\n\n    it('All numbers buttons work', () => {\n\n        for (let i = 0; i <= 9; i++) {\n            click('.b'+i);\n        }\n        click('.b0');\n        expect(\n            displayOutput()\n        ).toEqual('1234567890');\n\n    });\n\n    it('Button 0 inputs only once', () => {\n\n        for (let i = 0; i < 100; i++) {\n            click('.b0');\n        }\n\n        expect(\n            displayOutput()\n        ).toEqual('0');\n\n    });\n\n\n    it('Button 0 inputs only once (different test)', () => {\n\n        click('.b0');\n        click('.point');\n        click('.equals');\n\n        for (let i = 0; i < 9; i++) {\n            click('.b0');\n        }\n\n        expect(\n            displayOutput()\n        ).toEqual('0');\n\n    });\n\n\n    it('Button 0 inputs only once (different test)', () => {\n\n        click('.b2');\n        click('.addition');\n\n        for (let i = 0; i < 2; i++) {\n            click('.b0');\n        }\n\n        expect(\n            displayOutput()\n        ).toEqual('0');\n\n    });\n\n    it('Point inputs only once', () => {\n\n        for (let i = 0; i < 100; i++) {\n            if (i == 0 || i == 50) {\n                click('.b1');\n            }else{\n                click('.point');\n            }\n        }\n\n        expect(\n            displayOutput()\n        ).toEqual('1.1');\n\n    });\n\n    it('Point clicked at first time is added after zero', () => {\n\n        for (let i = 0; i < 100; i++) {\n            click('.point');\n        }\n        click('.b0');\n\n        expect(\n            displayOutput()\n        ).toEqual('0.0');\n\n    });\n\n    it('Multiplication works properly', () => {\n\n        for (let i = 1; i <= 9; i++) {\n\n            click('.b'+i);\n            click('.multiplication');\n        }\n\n        expect(\n            displayOutput()\n        ).toEqual('362880');\n\n    });\n\n\n    it('Multiplication works properly', () => {\n\n        for (let i = 1; i <= 9; i++) {\n            click('.b9');\n            click('.multiplication');\n        }\n\n        expect(\n            displayOutput()\n        ).toEqual('387420489');\n\n    });\n\n\n    it('Addition works properly', () => {\n\n        for (let i = 1; i <= 9; i++) {\n            click('.b'+i);\n            click('.addition');\n        }\n\n        expect(\n            displayOutput()\n        ).toEqual('45');\n    });\n\n\n    it('Addition works properly (different addition)', () => {\n\n        for (let i = 1; i <= 9; i++) {\n            click('.b1');\n            click('.addition');\n            click('.b4');\n            click('.addition');\n            click('.b9');\n            click('.addition');\n        }\n\n        expect(\n            displayOutput()\n        ).toEqual('126');\n    });\n\n\n    it('Division works properly', () => {\n\n        click('.b7');\n        click('.b2');\n        click('.b9');\n        click('.b8');\n        click('.b5');\n        click('.b1');\n        click('.b4');\n        click('.division');\n        click('.b3');\n\n        click('.equals');\n\n        expect(\n            displayOutput()\n        ).toEqual('2432838');\n    });\n\n    it('Substraction and equals work properly', () => {\n\n        click('.b8');\n        click('.b7');\n\n        for (let i = 0; i <= 9; i++) {\n\n            click('.subtraction');\n            click('.b'+i);\n        }\n        click('.equals');\n\n        expect(\n            displayOutput()\n        ).toEqual('42')\n    });\n\n    it('C (clear all) button works properly', () => {\n\n        for (let i = 0; i <= 9; i++) {\n            click('.addition');\n            click('.b'+i);\n        }\n        click('.equals');\n        click('.clear-all');\n\n        expect(\n            displayOutput()\n        ).toEqual('0')\n    });\n\n    it('Del (delete one character) button works properly', () => {\n\n        for (let i = 0; i <= 9; i++) {\n            click('.b'+i);\n        }\n        click('.point');\n        click('.b0');\n\n        click('.delete');\n        click('.delete');\n        click('.delete');\n\n        expect(\n            displayOutput()\n        ).toEqual('12345678')\n    });\n\n    it('Display don\\'t display numbers containing more than 11 digits', () => {\n\n        for (let i = 0; i <= 90; i++) {\n            i === 5 ? click('.point') : click('.b8');\n        }\n\n        let output = displayOutput();\n        let pointIndex = output.indexOf('.');\n        output.slice(pointIndex, pointIndex+1);\n        expect(\n            output.length\n        ).toBeLessThanOrEqual(11);\n    });\n\n\n    it('Display don\\'t display numbers containing more than 11 digits when doing operation', () => {\n\n        for (let i = 1; i < 100; i++) {\n            click('.b9');\n            click('.multiplication');\n        }\n        click('.equals');\n        let output = displayOutput();\n        let pointIndex = output.indexOf('.');\n        output.slice(pointIndex, pointIndex+1);\n        expect(\n            output.length\n        ).toBeLessThanOrEqual(11);\n    });\n\n    it('NaN displays as \\'Error\\'', () => {\n\n        click('.b0');\n        click('.division');\n        click('.b0');\n        click('.equals');\n        expect(\n            displayOutput()\n        ).toEqual('Error');\n    });\n\n\n    it('Many addition inputs shouldn\\'t change the display', () => {\n\n        click('.b2');\n        for (let i = 0; i < 20; i++) {\n            click('.addition');\n        }\n        expect(\n            displayOutput()\n        ).toEqual('2');\n    });\n\n    it('Many multiplication inputs shouldn\\'t change the display', () => {\n\n        click('.b2');\n        for (let i = 0; i < 20; i++) {\n            click('.multiplication');\n        }\n        expect(\n            displayOutput()\n        ).toEqual('2');\n    });\n\n    it('Many division inputs shouldn\\'t change the display', () => {\n\n        click('.b2');\n        for (let i = 0; i < 20; i++) {\n            click('.division');\n        }\n        expect(\n            displayOutput()\n        ).toEqual('2');\n    });\n\n    it('Many subsraction inputs shouldn\\'t change the display', () => {\n\n        click('.b2');\n        for (let i = 0; i < 20; i++) {\n            click('.substraction');\n        }\n        expect(\n            displayOutput()\n        ).toEqual('2');\n    });\n\n    //TODO: del at beginning shouldn't delete\n    //TODO: del at beninning, twice clicks on '0 ' shouldn't show more than one zero\n    //TODO: 98 -> CE -> 123 should output 123 instead of 0123\n\n});\n"]}
1620e4f44d5d96f5a6851053a14ef537
"use strict";

var _interopRequireDefault = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _Calculator = _interopRequireDefault(require("./Calculator"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _jsxFileName = "/home/hermanschmidt/Desktop/calculator/src/components/Calculator/Calculator.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

describe('Calculator component', () => {
  it('Matches the snapshot', () => {
    const tree = _reactTestRenderer.default.create(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 14
      },
      __self: void 0
    })).toJSON();

    expect(tree).toMatchSnapshot();
  });
  it('The first displayed number should be 0', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 19
      },
      __self: void 0
    }));
    expect(wrapper.find('.display').text()).toEqual('0');
  });
  it('All numbers buttons work', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 27
      },
      __self: void 0
    }));

    for (var i = 0; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
    }

    wrapper.find('.b0').simulate('click');
    expect(wrapper.find('.display').text()).toEqual('1234567890');
  });
  it('Button 0 inputs only once', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 40
      },
      __self: void 0
    }));

    for (var i = 0; i < 100; i++) {
      wrapper.find('.b0').simulate('click');
    }

    expect(wrapper.find('.display').text()).toEqual('0');
  });
  it('Point inputs only once', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 54
      },
      __self: void 0
    }));
    wrapper.find('.point').simulate('click');

    for (let i = 0; i < 100; i++) {
      if (i == 0 || i == 50) {
        wrapper.find('.b1').simulate('click');
      } else {
        wrapper.find('.point').simulate('click');
      }
    }

    expect(wrapper.find('.display').text()).toEqual('1.1');
  });
  it('Multiplication works properly', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72
      },
      __self: void 0
    }));

    for (let i = 1; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
      wrapper.find('.multiplication').simulate('click');
    }

    expect(wrapper.find('.display').text()).toEqual('362880');
  });
  it('Addition works properly', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 87
      },
      __self: void 0
    }));

    for (let i = 1; i <= 9; i++) {
      wrapper.find('.b' + i).simulate('click');
      wrapper.find('.addition').simulate('click');
    }

    expect(wrapper.find('.display').text()).toEqual('45');
  });
  it('Substraction works properly', () => {
    const wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 104
      },
      __self: void 0
    }));
    wrapper.find('.b8').simulate('click');
    wrapper.find('.b7').simulate('click');

    for (let i = 0; i <= 9; i++) {
      wrapper.find('.subtraction').simulate('click');
      wrapper.find('.b' + i).simulate('click');
    }

    wrapper.find('.equals').simulate('click');
    expect(wrapper.find('.display').text()).toEqual('42');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhbGN1bGF0b3IudGVzdC5qcyJdLCJuYW1lcyI6WyJFbnp5bWUiLCJjb25maWd1cmUiLCJhZGFwdGVyIiwiQWRhcHRlciIsImRlc2NyaWJlIiwiaXQiLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJ3cmFwcGVyIiwiZmluZCIsInRleHQiLCJ0b0VxdWFsIiwiaSIsInNpbXVsYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQUVBQSxnQkFBT0MsU0FBUCxDQUFpQjtBQUFFQyxFQUFBQSxPQUFPLEVBQUUsSUFBSUMsMkJBQUo7QUFBWCxDQUFqQjs7QUFFQUMsUUFBUSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFFbkNDLEVBQUFBLEVBQUUsQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBQzdCLFVBQU1DLElBQUksR0FBR0MsMkJBQVNDLE1BQVQsQ0FBZ0IsNkJBQUMsbUJBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFBaEIsRUFBK0JDLE1BQS9CLEVBQWI7O0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0osSUFBRCxDQUFOLENBQWFLLGVBQWI7QUFDSCxHQUhDLENBQUY7QUFLQU4sRUFBQUEsRUFBRSxDQUFDLHdDQUFELEVBQTJDLE1BQU07QUFDL0MsVUFBTU8sT0FBTyxHQUFHLHFCQUFRLDZCQUFDLG1CQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BQVIsQ0FBaEI7QUFDQUYsSUFBQUEsTUFBTSxDQUNGRSxPQUFPLENBQUNDLElBQVIsQ0FBYSxVQUFiLEVBQXlCQyxJQUF6QixFQURFLENBQU4sQ0FFRUMsT0FGRixDQUVVLEdBRlY7QUFHSCxHQUxDLENBQUY7QUFRQVYsRUFBQUEsRUFBRSxDQUFDLDBCQUFELEVBQTZCLE1BQU07QUFDakMsVUFBTU8sT0FBTyxHQUFHLHFCQUFRLDZCQUFDLG1CQUFEO0FB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LENBQUNDLElBQVIsQ0FBYSxTQUFiLEVBQXdCSSxRQUF4QixDQUFpQyxPQUFqQztBQUdBUCxJQUFBQSxNQUFNLENBQ0ZFLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLFVBQWIsRUFBeUJDLElBQXpCLEVBREUsQ0FBTixDQUVFQyxPQUZGLENBRVUsSUFGVjtBQUdILEdBakJDLENBQUY7QUFvQkgsQ0FoSE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYWxjdWxhdG9yIGZyb20gJy4vQ2FsY3VsYXRvcic7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgRW56eW1lIGZyb20gJ2VuenltZSc7XG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XG5pbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcblxuRW56eW1lLmNvbmZpZ3VyZSh7IGFkYXB0ZXI6IG5ldyBBZGFwdGVyKCkgfSk7XG5cbmRlc2NyaWJlKCdDYWxjdWxhdG9yIGNvbXBvbmVudCcsICgpID0+IHtcblxuICAgIGl0KCdNYXRjaGVzIHRoZSBzbmFwc2hvdCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZSg8Q2FsY3VsYXRvci8+KS50b0pTT04oKTtcbiAgICAgICAgZXhwZWN0KHRyZWUpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1RoZSBmaXJzdCBkaXNwbGF5ZWQgbnVtYmVyIHNob3VsZCBiZSAwJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8Q2FsY3VsYXRvci8+KTtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgd3JhcHBlci5maW5kKCcuZGlzcGxheScpLnRleHQoKVxuICAgICAgICApLnRvRXF1YWwoJzAnKTtcbiAgICB9KTtcblxuXG4gICAgaXQoJ0FsbCBudW1iZXJzIGJ1dHRvbnMgd29yaycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPENhbGN1bGF0b3IvPik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XG4gICAgICAgICAgICB3cmFwcGVyLmZpbmQoJy5iJytpKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVyLmZpbmQoJy5iMCcpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICB3cmFwcGVyLmZpbmQoJy5kaXNwbGF5JykudGV4dCgpXG4gICAgICAgICkudG9FcXVhbCgnMTIzNDU2Nzg5MCcpO1xuXG4gICAgfSk7XG5cbiAgICBpdCgnQnV0dG9uIDAgaW5wdXRzIG9ubHkgb25jZScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPENhbGN1bGF0b3IvPik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgICAgICAgICAgd3JhcHBlci5maW5kKCcuYjAnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIHdyYXBwZXIuZmluZCgnLmRpc3BsYXknKS50ZXh0KClcbiAgICAgICAgKS50b0VxdWFsKCcwJyk7XG5cbiAgICB9KTtcblxuXG4gICAgaXQoJ1BvaW50IGlucHV0cyBvbmx5IG9uY2UnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxDYWxjdWxhdG9yLz4pO1xuXG4gICAgICAgIHdyYXBwZXIuZmluZCgnLnBvaW50Jykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09IDAgfHwgaSA9PSA1MCkge1xuICAgICAgICAgICAgICAgIHdyYXBwZXIuZmluZCgnLmIxJykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmZpbmQoJy5wb2ludCcpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgd3JhcHBlci5maW5kKCcuZGlzcGxheScpLnRleHQoKVxuICAgICAgICApLnRvRXF1YWwoJzEuMScpO1xuXG4gICAgfSk7XG5cbiAgICBpdCgnTXVsdGlwbGljYXRpb24gd29ya3MgcHJvcGVybHknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxDYWxjdWxhdG9yLz4pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDk7IGkrKykge1xuXG4gICAgICAgICAgICB3cmFwcGVyLmZpbmQoJy5iJytpKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgICAgICAgIHdyYXBwZXIuZmluZCgnLm11bHRpcGxpY2F0aW9uJykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICB3cmFwcGVyLmZpbmQoJy5kaXNwbGF5JykudGV4dCgpXG4gICAgICAgICkudG9FcXVhbCgnMzYyODgwJyk7XG5cbiAgICB9KTtcblxuICAgIGl0KCdBZGRpdGlvbiB3b3JrcyBwcm9wZXJseScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPENhbGN1bGF0b3IvPik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gOTsgaSsrKSB7XG5cbiAgICAgICAgICAgIHdyYXBwZXIuZmluZCgnLmInK2kpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgICAgICAgICAgd3JhcHBlci5maW5kKCcuYWRkaXRpb24nKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgd3JhcHBlci5maW5kKCcuZGlzcGxheScpLnRleHQoKVxuICAgICAgICApLnRvRXF1YWwoJzQ1Jyk7XG5cbiAgICB9KTtcblxuXG4gICAgaXQoJ1N1YnN0cmFjdGlvbiB3b3JrcyBwcm9wZXJseScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPENhbGN1bGF0b3IvPik7XG5cbiAgICAgICAgd3JhcHBlci5maW5kKCcuYjgnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgICAgd3JhcHBlci5maW5kKCcuYjcnKS5zaW11bGF0ZSgnY2xpY2snKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSA5OyBpKyspIHtcblxuICAgICAgICAgICAgd3JhcHBlci5maW5kKCcuc3VidHJhY3Rpb24nKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgICAgICAgIHdyYXBwZXIuZmluZCgnLmInK2kpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZXIuZmluZCgnLmVxdWFscycpLnNpbXVsYXRlKCdjbGljaycpO1xuXG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgd3JhcHBlci5maW5kKCcuZGlzcGxheScpLnRleHQoKVxuICAgICAgICApLnRvRXF1YWwoJzQyJylcbiAgICB9KTtcblxuXG59KTtcbiJdfQ==
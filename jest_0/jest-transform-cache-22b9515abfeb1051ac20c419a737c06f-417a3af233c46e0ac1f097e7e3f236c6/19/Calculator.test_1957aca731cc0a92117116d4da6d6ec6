cb28a913c850d79d6561f8646bf013be
"use strict";

var _interopRequireDefault = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _Calculator = _interopRequireDefault(require("./Calculator"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _enzyme = _interopRequireWildcard(require("enzyme"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _jsxFileName = "/home/hermanschmidt/Desktop/calculator/src/components/Calculator/Calculator.test.js";

_enzyme.default.configure({
  adapter: new _enzymeAdapterReact.default()
});

describe('Calculator component snapshot', () => {
  it('Matches the snapshot', () => {
    const tree = _reactTestRenderer.default.create(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 15
      },
      __self: void 0
    })).toJSON();

    expect(tree).toMatchSnapshot();
  });
});
describe('Calculator component buttons and display', () => {
  let wrapper;

  const displayOutput = () => {
    return wrapper.find('.display').text();
  };

  const click = node => {
    wrapper.find(node).simulate('click');
  };

  beforeEach(() => {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_Calculator.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 33
      },
      __self: void 0
    }));
  });
  it('The first displayed number should be 0', () => {
    expect(displayOutput()).toEqual('0');
  });
  it('All numbers buttons work', () => {
    for (let i = 0; i <= 9; i++) {
      click('.b' + i);
    }

    click('.b0');
    expect(displayOutput()).toEqual('1234567890');
  });
  it('Button 0 inputs only once', () => {
    for (let i = 0; i < 100; i++) {
      click('.b0');
    }

    expect(displayOutput()).toEqual('0');
  });
  it('Button 0 inputs only once (different test)', () => {
    click('.b0');
    click('.point');
    click('.equals');

    for (let i = 0; i < 9; i++) {
      click('.b0');
    }

    expect(displayOutput()).toEqual('0');
  });
  it('Point inputs only once', () => {
    for (let i = 0; i < 100; i++) {
      if (i == 0 || i == 50) {
        click('.b1');
      } else {
        click('.point');
      }
    }

    expect(displayOutput()).toEqual('1.1');
  });
  it('Point clicked at first time is added after zero', () => {
    for (let i = 0; i < 100; i++) {
      click('.point');
    }

    click('.b0');
    expect(displayOutput()).toEqual('0.0');
  });
  it('Multiplication works properly', () => {
    for (let i = 1; i <= 9; i++) {
      click('.b' + i);
      click('.multiplication');
    }

    expect(displayOutput()).toEqual('362880');
  });
  it('Addition works properly', () => {
    for (let i = 1; i <= 9; i++) {
      click('.b' + i);
      click('.addition');
    }

    expect(displayOutput()).toEqual('45');
  });
  it('Division works properly', () => {
    click('.b7');
    click('.b2');
    click('.b9');
    click('.b8');
    click('.b5');
    click('.b1');
    click('.b4');
    click('.division');
    click('.b3');
    click('.equals');
    expect(displayOutput()).toEqual('2432838');
  });
  it('Substraction and equals work properly', () => {
    click('.b8');
    click('.b7');

    for (let i = 0; i <= 9; i++) {
      click('.subtraction');
      click('.b' + i);
    }

    click('.equals');
    expect(displayOutput()).toEqual('42');
  });
  it('C (clear all) button works properly', () => {
    for (let i = 0; i <= 9; i++) {
      click('.addition');
      click('.b' + i);
    }

    click('.equals');
    click('.clear-all');
    expect(displayOutput()).toEqual('0');
  });
  it('Del (delete one character) button works properly', () => {
    for (let i = 0; i <= 9; i++) {
      click('.b' + i);
    }

    click('.point');
    click('.b0');
    click('.delete');
    click('.delete');
    click('.delete');
    expect(displayOutput()).toEqual('12345678');
  });
  it('Display don\'t display numbers containing more than 11 digits', () => {
    for (let i = 0; i <= 90; i++) {
      i === 5 ? click('.point') : click('.b8');
    }

    let pointIndex = displayOutput().indexOf('.');
    let filteredOutput = displayOutput().slice(pointIndex, pointIndex + 1);
    expect(filteredOutput.toString().length).toBeLessThanOrEqual(11);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhbGN1bGF0b3IudGVzdC5qcyJdLCJuYW1lcyI6WyJFbnp5bWUiLCJjb25maWd1cmUiLCJhZGFwdGVyIiwiQWRhcHRlciIsImRlc2NyaWJlIiwiaXQiLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJ0b0pTT04iLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJ3cmFwcGVyIiwiZGlzcGxheU91dHB1dCIsImZpbmQiLCJ0ZXh0IiwiY2xpY2siLCJub2RlIiwic2ltdWxhdGUiLCJiZWZvcmVFYWNoIiwidG9FcXVhbCIsImkiLCJwb2ludEluZGV4IiwiaW5kZXhPZiIsImZpbHRlcmVkT3V0cHV0Iiwic2xpY2UiLCJ0b1N0cmluZyIsImxlbmd0aCIsInRvQmVMZXNzVGhhbk9yRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBRUFBLGdCQUFPQyxTQUFQLENBQWlCO0FBQUVDLEVBQUFBLE9BQU8sRUFBRSxJQUFJQywyQkFBSjtBQUFYLENBQWpCOztBQUdBQyxRQUFRLENBQUMsK0JBQUQsRUFBa0MsTUFBTTtBQUU1Q0MsRUFBQUEsRUFBRSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDN0IsVUFBTUMsSUFBSSxHQUFHQywyQkFBU0MsTUFBVCxDQUFnQiw2QkFBQyxtQkFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUFoQixFQUErQkMsTUFBL0IsRUFBYjs7QUFDQUMsSUFBQUEsTUFBTSxDQUFDSixJQUFELENBQU4sQ0FBYUssZUFBYjtBQUNILEdBSEMsQ0FBRjtBQUlILENBTk8sQ0FBUjtBQVNBUCxRQUFRLENBQUMsMENBQUQsRUFBNkMsTUFBTTtBQUd2RCxNQUFJUSxPQUFKOztBQUNBLFFBQU1DLGFBQWEsR0FBRyxNQUFNO0FBQ3hCLFdBQU9ELE9BQU8sQ0FBQ0UsSUFBUixDQUFhLFVBQWIsRUFBeUJDLElBQXpCLEVBQVA7QUFDSCxHQUZEOztBQUdBLFFBQU1DLEtBQUss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QUNIOztBQUNETCxJQUFBQSxLQUFLLENBQUMsUUFBRCxDQUFMO0FBQ0FBLElBQUFBLEtBQUssQ0FBQyxLQUFELENBQUw7QUFFQUEsSUFBQUEsS0FBSyxDQUFDLFNBQUQsQ0FBTDtBQUNBQSxJQUFBQSxLQUFLLENBQUMsU0FBRCxDQUFMO0FBQ0FBLElBQUFBLEtBQUssQ0FBQyxTQUFELENBQUw7QUFFQU4sSUFBQUEsTUFBTSxDQUNGRyxhQUFhLEVBRFgsQ0FBTixDQUVFTyxPQUZGLENBRVUsVUFGVjtBQUdILEdBZkMsQ0FBRjtBQWlCQWYsRUFBQUEsRUFBRSxDQUFDLCtEQUFELEVBQWtFLE1BQU07QUFFdEUsU0FBSyxJQUFJZ0IsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsSUFBSSxFQUFyQixFQUF5QkEsQ0FBQyxFQUExQixFQUE4QjtBQUMxQkEsTUFBQUEsQ0FBQyxLQUFLLENBQU4sR0FBVUwsS0FBSyxDQUFDLFFBQUQsQ0FBZixHQUE0QkEsS0FBSyxDQUFDLEtBQUQsQ0FBakM7QUFDSDs7QUFFRCxRQUFJTSxVQUFVLEdBQUdULGFBQWEsR0FBR1UsT0FBaEIsQ0FBd0IsR0FBeEIsQ0FBakI7QUFDQSxRQUFJQyxjQUFjLEdBQUdYLGFBQWEsR0FBR1ksS0FBaEIsQ0FBc0JILFVBQXRCLEVBQWtDQSxVQUFVLEdBQUMsQ0FBN0MsQ0FBckI7QUFDQVosSUFBQUEsTUFBTSxDQUNGYyxjQUFjLENBQUNFLFFBQWYsR0FBMEJDLE1BRHhCLENBQU4sQ0FFRUMsbUJBRkYsQ0FFc0IsRUFGdEI7QUFHSCxHQVhDLENBQUY7QUFZSCxDQXhNTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhbGN1bGF0b3IgZnJvbSAnLi9DYWxjdWxhdG9yJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBFbnp5bWUgZnJvbSAnZW56eW1lJztcbmltcG9ydCBBZGFwdGVyIGZyb20gJ2VuenltZS1hZGFwdGVyLXJlYWN0LTE2JztcbmltcG9ydCB7IHNoYWxsb3cgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5Fbnp5bWUuY29uZmlndXJlKHsgYWRhcHRlcjogbmV3IEFkYXB0ZXIoKSB9KTtcblxuXG5kZXNjcmliZSgnQ2FsY3VsYXRvciBjb21wb25lbnQgc25hcHNob3QnLCAoKSA9PiB7XG5cbiAgICBpdCgnTWF0Y2hlcyB0aGUgc25hcHNob3QnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoPENhbGN1bGF0b3IvPikudG9KU09OKCk7XG4gICAgICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcbn0pO1xuXG5cbmRlc2NyaWJlKCdDYWxjdWxhdG9yIGNvbXBvbmVudCBidXR0b25zIGFuZCBkaXNwbGF5JywgKCkgPT4ge1xuXG5cbiAgICBsZXQgd3JhcHBlcjtcbiAgICBjb25zdCBkaXNwbGF5T3V0cHV0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5maW5kKCcuZGlzcGxheScpLnRleHQoKTtcbiAgICB9XG4gICAgY29uc3QgY2xpY2sgPSBub2RlID0+IHtcbiAgICAgICAgd3JhcHBlci5maW5kKG5vZGUpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgIH1cblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICB3cmFwcGVyID0gc2hhbGxvdyg8Q2FsY3VsYXRvci8+KTtcbiAgICB9KVxuXG5cbiAgICBpdCgnVGhlIGZpcnN0IGRpc3BsYXllZCBudW1iZXIgc2hvdWxkIGJlIDAnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIGRpc3BsYXlPdXRwdXQoKVxuICAgICAgICApLnRvRXF1YWwoJzAnKTtcbiAgICB9KTtcblxuICAgIGl0KCdBbGwgbnVtYmVycyBidXR0b25zIHdvcmsnLCAoKSA9PiB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XG4gICAgICAgICAgICBjbGljaygnLmInK2kpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcuYjAnKTtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMTIzNDU2Nzg5MCcpO1xuXG4gICAgfSk7XG5cbiAgICBpdCgnQnV0dG9uIDAgaW5wdXRzIG9ubHkgb25jZScsICgpID0+IHtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XG4gICAgICAgICAgICBjbGljaygnLmIwJyk7XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KClcbiAgICAgICAgKS50b0VxdWFsKCcwJyk7XG5cbiAgICB9KTtcblxuXG4gICAgaXQoJ0J1dHRvbiAwIGlucHV0cyBvbmx5IG9uY2UgKGRpZmZlcmVudCB0ZXN0KScsICgpID0+IHtcblxuICAgICAgICBjbGljaygnLmIwJyk7XG4gICAgICAgIGNsaWNrKCcucG9pbnQnKTtcbiAgICAgICAgY2xpY2soJy5lcXVhbHMnKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDk7IGkrKykge1xuICAgICAgICAgICAgY2xpY2soJy5iMCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMCcpO1xuXG4gICAgfSk7XG5cblxuICAgIGl0KCdQb2ludCBpbnB1dHMgb25seSBvbmNlJywgKCkgPT4ge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09IDAgfHwgaSA9PSA1MCkge1xuICAgICAgICAgICAgICAgIGNsaWNrKCcuYjEnKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGNsaWNrKCcucG9pbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIGRpc3BsYXlPdXRwdXQoKVxuICAgICAgICApLnRvRXF1YWwoJzEuMScpO1xuXG4gICAgfSk7XG5cbiAgICBpdCgnUG9pbnQgY2xpY2tlZCBhdCBmaXJzdCB0aW1lIGlzIGFkZGVkIGFmdGVyIHplcm8nLCAoKSA9PiB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgICAgICAgICAgY2xpY2soJy5wb2ludCcpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcuYjAnKTtcblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KClcbiAgICAgICAgKS50b0VxdWFsKCcwLjAnKTtcblxuICAgIH0pO1xuXG4gICAgaXQoJ011bHRpcGxpY2F0aW9uIHdvcmtzIHByb3Blcmx5JywgKCkgPT4ge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDk7IGkrKykge1xuXG4gICAgICAgICAgICBjbGljaygnLmInK2kpO1xuICAgICAgICAgICAgY2xpY2soJy5tdWx0aXBsaWNhdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMzYyODgwJyk7XG5cbiAgICB9KTtcblxuICAgIGl0KCdBZGRpdGlvbiB3b3JrcyBwcm9wZXJseScsICgpID0+IHtcblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA5OyBpKyspIHtcbiAgICAgICAgICAgIGNsaWNrKCcuYicraSk7XG4gICAgICAgICAgICBjbGljaygnLmFkZGl0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KClcbiAgICAgICAgKS50b0VxdWFsKCc0NScpO1xuICAgIH0pO1xuXG5cblxuICAgIGl0KCdEaXZpc2lvbiB3b3JrcyBwcm9wZXJseScsICgpID0+IHtcblxuICAgICAgICBjbGljaygnLmI3Jyk7XG4gICAgICAgIGNsaWNrKCcuYjInKTtcbiAgICAgICAgY2xpY2soJy5iOScpO1xuICAgICAgICBjbGljaygnLmI4Jyk7XG4gICAgICAgIGNsaWNrKCcuYjUnKTtcbiAgICAgICAgY2xpY2soJy5iMScpO1xuICAgICAgICBjbGljaygnLmI0Jyk7XG4gICAgICAgIGNsaWNrKCcuZGl2aXNpb24nKTtcbiAgICAgICAgY2xpY2soJy5iMycpO1xuXG4gICAgICAgIGNsaWNrKCcuZXF1YWxzJyk7XG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMjQzMjgzOCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1N1YnN0cmFjdGlvbiBhbmQgZXF1YWxzIHdvcmsgcHJvcGVybHknLCAoKSA9PiB7XG5cbiAgICAgICAgY2xpY2soJy5iOCcpO1xuICAgICAgICBjbGljaygnLmI3Jyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XG5cbiAgICAgICAgICAgIGNsaWNrKCcuc3VidHJhY3Rpb24nKTtcbiAgICAgICAgICAgIGNsaWNrKCcuYicraSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpY2soJy5lcXVhbHMnKTtcblxuICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBkaXNwbGF5T3V0cHV0KClcbiAgICAgICAgKS50b0VxdWFsKCc0MicpXG4gICAgfSk7XG5cbiAgICBpdCgnQyAoY2xlYXIgYWxsKSBidXR0b24gd29ya3MgcHJvcGVybHknLCAoKSA9PiB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XG4gICAgICAgICAgICBjbGljaygnLmFkZGl0aW9uJyk7XG4gICAgICAgICAgICBjbGljaygnLmInK2kpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcuZXF1YWxzJyk7XG4gICAgICAgIGNsaWNrKCcuY2xlYXItYWxsJyk7XG5cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZGlzcGxheU91dHB1dCgpXG4gICAgICAgICkudG9FcXVhbCgnMCcpXG4gICAgfSk7XG5cbiAgICBpdCgnRGVsIChkZWxldGUgb25lIGNoYXJhY3RlcikgYnV0dG9uIHdvcmtzIHByb3Blcmx5JywgKCkgPT4ge1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IDk7IGkrKykge1xuICAgICAgICAgICAgY2xpY2soJy5iJytpKTtcbiAgICAgICAgfVxuICAgICAgICBjbGljaygnLnBvaW50Jyk7XG4gICAgICAgIGNsaWNrKCcuYjAnKTtcblxuICAgICAgICBjbGljaygnLmRlbGV0ZScpO1xuICAgICAgICBjbGljaygnLmRlbGV0ZScpO1xuICAgICAgICBjbGljaygnLmRlbGV0ZScpO1xuXG4gICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgIGRpc3BsYXlPdXRwdXQoKVxuICAgICAgICApLnRvRXF1YWwoJzEyMzQ1Njc4JylcbiAgICB9KTtcblxuICAgIGl0KCdEaXNwbGF5IGRvblxcJ3QgZGlzcGxheSBudW1iZXJzIGNvbnRhaW5pbmcgbW9yZSB0aGFuIDExIGRpZ2l0cycsICgpID0+IHtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSA5MDsgaSsrKSB7XG4gICAgICAgICAgICBpID09PSA1ID8gY2xpY2soJy5wb2ludCcpIDogY2xpY2soJy5iOCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBvaW50SW5kZXggPSBkaXNwbGF5T3V0cHV0KCkuaW5kZXhPZignLicpO1xuICAgICAgICBsZXQgZmlsdGVyZWRPdXRwdXQgPSBkaXNwbGF5T3V0cHV0KCkuc2xpY2UocG9pbnRJbmRleCwgcG9pbnRJbmRleCsxKTtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgZmlsdGVyZWRPdXRwdXQudG9TdHJpbmcoKS5sZW5ndGhcbiAgICAgICAgKS50b0JlTGVzc1RoYW5PckVxdWFsKDExKTtcbiAgICB9KTtcbn0pO1xuIl19
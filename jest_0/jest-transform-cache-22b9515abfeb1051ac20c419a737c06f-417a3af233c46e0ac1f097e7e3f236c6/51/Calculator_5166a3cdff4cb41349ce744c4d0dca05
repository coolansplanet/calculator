5bbad7e7d1543821678e3a81f13e85b9
"use strict";

var _interopRequireWildcard = require("/home/hermanschmidt/Desktop/calculator/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _jsxFileName = "/home/hermanschmidt/Desktop/calculator/src/components/Calculator/Calculator.js";

class Calculator extends _react.Component {
  constructor() {
    super();
    this.state = {
      display: '0',
      total: '0',
      operator: null,
      displayingTotal: true
    };
  }

  inputNumber(value) {
    let stringeredNumber = value.toString();
    let display = this.state.displayingTotal ? stringeredNumber : this.state.display + stringeredNumber;
    let displayingTotal = this.state.total === '0' && this.state.display === '0' && stringeredNumber === '0';
    this.setState({
      display: this.fitsOnDisplay(display) ? display : this.state.display,
      displayingTotal: displayingTotal
    });
  }

  inputPoint() {
    let display = this.state.display.indexOf('.') < 0 ? this.state.display + '.' : this.state.display;
    this.setState({
      display: this.state.displayingTotal ? '0.' : display,
      displayingTotal: false
    });
  }

  inputOperator(operator) {
    let total = this.state.operator ? eval(this.state.total + this.state.operator + this.state.display) : this.state.display;
    let display;

    if (isNaN(total)) {
      display = 'Error';
    } else {
      display = total.toString().substr(0, 11);
    }

    this.setState({
      display: display,
      total: total.toString(),
      operator: operator === '=' ? null : operator,
      displayingTotal: true
    });
  }

  fitsOnDisplay(aString) {
    let filteredString = aString;
    let pointIndex = filteredString.indexOf('.');
    filteredString.slice(pointIndex, pointIndex + 1);
    return filteredString.length <= 11;
  }

  clear(value) {
    if (value === 'all') {
      this.setState({
        display: '0',
        total: '0',
        operator: null,
        displayingTotal: true
      });
    } else if (value === 'entry') {
      this.setState({
        display: '0'
      });
    } else if (value === 'character') {
      let display = this.state.display.substr(0, this.state.display.length - 1);
      this.setState({
        display: this.state.display.length > 0 && !isNaN(display) ? display : '0'
      });
    }
  }

  keyPress(e) {
    console.log(e);
  }

  showAbout() {
    alert('\nCalculator:\nMade with â™¥ by Herman Schmidt\n');
  }

  render() {
    const inputNumber = this.inputNumber,
          inputPoint = this.inputPoint,
          inputOperator = this.inputOperator,
          clear = this.clear;
    return _react.default.createElement("div", {
      className: "calculator",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 109
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "display",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 110
      },
      __self: this
    }, this.state.display), _react.default.createElement("div", {
      className: "buttons",
      onKeyPress: keyPress.bind(this, e),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 114
      },
      __self: this
    }, _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 7),
      className: "b7",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 115
      },
      __self: this
    }, "7"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 8),
      className: "b8",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 120
      },
      __self: this
    }, "8"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 9),
      className: "b9",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 125
      },
      __self: this
    }, "9"), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '/'),
      className: "division",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 131
      },
      __self: this
    }, "\xF7"), _react.default.createElement("button", {
      className: "special-button clear-all",
      onClick: clear.bind(this, 'all'),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 137
      },
      __self: this
    }, "C"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 4),
      className: "b4",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 143
      },
      __self: this
    }, "4"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 5),
      className: "b5",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 148
      },
      __self: this
    }, "5"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 6),
      className: "b6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 153
      },
      __self: this
    }, "6"), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '*'),
      className: "multiplication",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 158
      },
      __self: this
    }, "\xD7"), _react.default.createElement("button", {
      className: "special-button",
      onClick: clear.bind(this, 'entry'),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 163
      },
      __self: this
    }, "CE"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 1),
      className: "b1",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 169
      },
      __self: this
    }, "1"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 2),
      className: "b2",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 174
      },
      __self: this
    }, "2"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 3),
      className: "b3",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 179
      },
      __self: this
    }, "3"), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '-'),
      className: "subtraction",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 184
      },
      __self: this
    }, "-"), _react.default.createElement("button", {
      className: "special-button delete",
      onClick: clear.bind(this, 'character'),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 189
      },
      __self: this
    }, "DEL"), _react.default.createElement("button", {
      onClick: inputNumber.bind(this, 0),
      className: "b0",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 195
      },
      __self: this
    }, "0"), _react.default.createElement("button", {
      onClick: inputPoint.bind(this),
      className: "point",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 200
      },
      __self: this
    }, "."), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '='),
      className: "equals",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 205
      },
      __self: this
    }, "="), _react.default.createElement("button", {
      onClick: inputOperator.bind(this, '+'),
      className: "addition",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 210
      },
      __self: this
    }, "+"), _react.default.createElement("button", {
      className: "special-button",
      onClick: this.showAbout,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 215
      },
      __self: this
    }, "A")));
  }

}

var _default = Calculator;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"sources":["Calculator.test.js"],"names":["Enzyme","configure","adapter","Adapter","describe","wrapper","beforeEach","it","expect","find","text","toEqual","i","simulate"],"mappings":"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","sourcesContent":["import Calculator from './Calculator';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Enzyme from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport { shallow } from 'enzyme';\nimport renderer from 'react-test-renderer';\n\nEnzyme.configure({ adapter: new Adapter() });\n\n\n/*describe('Calculator component snapshot', () => {\n\n    it('Matches the snapshot', () => {\n        const tree = renderer.create(<Calculator/>).toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});*/\n\n\ndescribe('Calculator component buttons and display', () => {\n\n\n    let wrapper;\n\n    beforeEach(() => {\n        wrapper = shallow(<Calculator/>);\n    })\n\n\n    it('The first displayed number should be 0', () => {\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('0');\n    });\n\n\n    it('All numbers buttons work', () => {\n\n        for (var i = 0; i <= 9; i++) {\n            wrapper.find('.b'+i).simulate('click');\n        }\n        wrapper.find('.b0').simulate('click');\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('1234567890');\n\n    });\n\n    it('Button 0 inputs only once', () => {\n\n        for (var i = 0; i < 100; i++) {\n            wrapper.find('.b0').simulate('click');\n        }\n\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('0');\n\n    });\n\n\n    it('Point inputs only once', () => {\n\n        for (let i = 0; i < 100; i++) {\n            if (i == 0 || i == 50) {\n                wrapper.find('.b1').simulate('click');\n            }else{\n                wrapper.find('.point').simulate('click');\n            }\n        }\n\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('1.1');\n\n    });\n\n    it('Point clicked at first time is added after zero', () => {\n\n        for (let i = 0; i < 100; i++) {\n            wrapper.find('.point').simulate('click');\n        }\n        wrapper.find('.b0').simulate('click');\n\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('0.0');\n\n    });\n\n    it('Multiplication works properly', () => {\n\n        for (let i = 1; i <= 9; i++) {\n\n            wrapper.find('.b'+i).simulate('click');\n            wrapper.find('.multiplication').simulate('click');\n        }\n\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('362880');\n\n    });\n\n    it('Addition works properly', () => {\n\n        for (let i = 1; i <= 9; i++) {\n\n            wrapper.find('.b'+i).simulate('click');\n            wrapper.find('.addition').simulate('click');\n        }\n\n\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('45');\n\n    });\n\n\n    it('Substraction and equals work properly', () => {\n\n        wrapper.find('.b8').simulate('click');\n        wrapper.find('.b7').simulate('click');\n\n        for (let i = 0; i <= 9; i++) {\n\n            wrapper.find('.subtraction').simulate('click');\n            wrapper.find('.b'+i).simulate('click');\n        }\n        wrapper.find('.equals').simulate('click');\n\n\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('42')\n    });\n\n    it('C (clear all) button works properly', () => {\n\n        for (let i = 0; i <= 9; i++) {\n\n            wrapper.find('.addition').simulate('click');\n            wrapper.find('.b'+i).simulate('click');\n        }\n        wrapper.find('.equals').simulate('click');\n        wrapper.find('.clear-all').simulate('click');\n\n        expect(\n            wrapper.find('.display').text()\n        ).toEqual('0')\n    });\n});\n"]}